rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // REGLAS TEMPORALES PARA DESARROLLO
    // ⚠️ IMPORTANTE: Estas reglas son muy permisivas, solo para desarrollo
    // ⚠️ NO usar en producción sin revisar y ajustar
    
    // Permitir todo para usuarios autenticados (DESARROLLO SOLO)
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Reglas de producción (comentadas para desarrollo)
    /*
    // Función helper para verificar si es admin
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Función helper para verificar si es teacher
    function isTeacher() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'teacher';
    }
    
    // Función helper para verificar si es student
    function isStudent() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    // Users: el usuario puede leer/escribir su propio documento; los admins pueden acceder a todos
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
      allow write: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
    }

    // Courses: usuarios autenticados pueden leer, teachers y admins pueden escribir
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        (isTeacher() && request.auth.uid == resource.data.teacher_id)
      );
    }

    // Enrollments: lectura para usuarios autenticados, escritura para admins y el estudiante
    match /enrollments/{enrollmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        (isStudent() && request.auth.uid == resource.data.student_id)
      );
    }

    // Assignments: lectura para usuarios autenticados, escritura para teachers y admins
    match /assignments/{assignmentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        (isTeacher() && request.auth.uid == resource.data.teacher_id)
      );
    }

    // Submissions: lectura para usuarios autenticados, escritura para el estudiante y admins
    match /submissions/{submissionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        (isStudent() && request.auth.uid == resource.data.student_id)
      );
    }

    // Announcements: lectura para usuarios autenticados, escritura para teachers y admins
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        (isTeacher() && request.auth.uid == resource.data.teacher_id)
      );
    }

    // Messages: lectura para usuarios autenticados, escritura para el remitente y admins
    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAdmin() || 
        request.auth.uid == resource.data.sender_id
      );
    }

    // Activity logs: lectura para usuarios autenticados, escritura para admins
    match /activity_logs/{logId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }
    */
  }
}
